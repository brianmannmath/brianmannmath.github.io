<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Math and Programming]]></title>
  <link href="http://brianmannmath.github.io/atom.xml" rel="self"/>
  <link href="http://brianmannmath.github.io/"/>
  <updated>2014-02-22T15:14:12-07:00</updated>
  <id>http://brianmannmath.github.io/</id>
  <author>
    <name><![CDATA[Brian Mann]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integer Partitions in Python]]></title>
    <link href="http://brianmannmath.github.io/blog/2014/02/21/integer-partitions/"/>
    <updated>2014-02-21T23:20:29-07:00</updated>
    <id>http://brianmannmath.github.io/blog/2014/02/21/integer-partitions</id>
    <content type="html"><![CDATA[<p>Spoiler alert: if you don’t want solutions to project euler problems 31 and 78, stop reading now. </p>

<p>I want to write about these problem, because although they seem similar (and are mathematically similar) they require somewhat solutions in order to run in a reasonable amount of time. Also, it will give me a chance to explain my thought process a bit.</p>

<h3 id="problem-31">Problem 31</h3>

<p>This problem asks how many different ways you could make 2 GBP with regular British currency (1, 2, 5, 10, 20, 50, 100, or 200 pence). You might recognize this as being similar to the problem of finding <a href="http://en.wikipedia.org/wiki/Integer_partition">partitions</a> of integers. </p>

<p>How do we approach this problem? First, we notice that there are a lot of choices to make when trying to find a way to build 200 out of our list of values, so a “bottom-up” approach probably won’t work. That is, if we decide to start with a coin value, say 5, and then pick another coin value, say 10, and keep doing this until the sum equals or exceeds 200. Then repeat for every starting value.</p>

<p>If you do it this way, it’s basically impossible to do any sort of dynamic programming. You’ll need to do the same computations over and over again, and there’s not way to avoid this.</p>

<p>A much better solution is to use the tree-like structure natural to this problem and recurse. Here’s what I mean: start with 200. Then substract off every possible coin value: <script type="math/tex">(200-200), (200-100), (200-50), \ldots</script>.</p>

<p>There’s a catch though! Once you subtract a coin of value <script type="math/tex">k</script>, you’re never allowed to substract a coin of value larger than <script type="math/tex">k</script> in the same branch of the tree. This is to guarantee uniqueness of the partitions (i.e. so we don’t count both <script type="math/tex">5 = 2 + 2 + 1</script> and <script type="math/tex">5 = 1 + 2 + 2</script> as different partitions.)</p>

<p>Here’s a sketch (literally) of what’s going on in my head when I think about finding ways to make 5 pence out of other coins. </p>

<p><img src="http://brianmannmath.github.io/images/problem31tree.jpg" alt="Tree-like structure for this algorithm" /></p>

<p>Notice that each branch of the tree gives a different partition of 5 in terms of the coins 5, 2, and 1:</p>

<script type="math/tex; mode=display">5</script>

<script type="math/tex; mode=display">2 + 2 + 1</script>

<script type="math/tex; mode=display">2 + 1 +1 + 1</script>

<script type="math/tex; mode=display">1 + 1+ 1+ 1+ 1</script>

<p>To get the number of way to make 5 out of these coins, simply add up the number of branches in the tree!</p>

<p>Of course, there is a way to speed this up: we can have the computer keep track of already computed values! But remember, in the above image, even though <script type="math/tex">5-2 = 4-1</script>, the number of branches from each of these nodes differ. This is because we aren’t allowed to subtract coins bigger than 1 off the value of <script type="math/tex">4-1</script>. So, we don’t only need to remember the value of <script type="math/tex">4-1</script>, but also <script type="math/tex">1</script>. </p>

<p>Here’s a solution in python:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">coins</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">howManyWays</span><span class="p">(</span><span class="n">amount</span><span class="p">,</span><span class="n">coinList</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="n">ways</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">amount</span> <span class="o">==</span> <span class="mi">0</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">y</span><span class="p">:</span> <span class="n">y</span> <span class="o">&lt;=</span> <span class="n">amount</span><span class="p">,</span> <span class="n">coinList</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">amount</span> <span class="o">-</span> <span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="ow">in</span> <span class="n">cache</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class="line">            <span class="n">ways</span> <span class="o">=</span> <span class="n">ways</span> <span class="o">+</span> <span class="n">cache</span><span class="p">[(</span><span class="n">amount</span><span class="o">-</span><span class="n">x</span><span class="p">,</span><span class="n">x</span><span class="p">)]</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[(</span><span class="n">amount</span><span class="o">-</span><span class="n">x</span><span class="p">,</span><span class="n">x</span><span class="p">)]</span> <span class="o">=</span> <span class="n">howManyWays</span><span class="p">(</span><span class="n">amount</span> <span class="o">-</span> <span class="n">x</span><span class="p">,</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">y</span><span class="p">:</span> <span class="n">y</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="p">,</span> <span class="n">coinList</span><span class="p">))</span>
</span><span class="line">            <span class="n">ways</span> <span class="o">=</span> <span class="n">ways</span> <span class="o">+</span> <span class="n">cache</span><span class="p">[(</span><span class="n">amount</span><span class="o">-</span><span class="n">x</span><span class="p">,</span><span class="n">x</span><span class="p">)]</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">ways</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">howManyWays</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span><span class="n">coins</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Something to think about: what happens if we didn’t have a coin with value 1? How would we need to change this?</p>

<h3 id="problem-78">Problem 78</h3>

<p>After I wrote the function above, I went looking for other problems where I could use it. I found problem 78, which asks to compute the smallest positive integer <script type="math/tex">n</script> for which the number of partitions, <script type="math/tex">p(n)</script>, is divisible by 1,000,000.</p>

<p>Notice that finding integer paritions is a special case of the above coin-finding problem, such that for any value <script type="math/tex">n</script>, the set of coins is {<script type="math/tex">1,2, \ldots, n</script>}.</p>

<p>If you want, you can start printing out values for <script type="math/tex">p(n)</script> using the above function. You’ll find that <script type="math/tex">p(n)</script> gets very large very quickly (hundreds of digits once <script type="math/tex">n</script> reaches the thousands). Even with caching, we need something much quicker. </p>

<h4 id="euler-to-the-rescue">Euler to the rescue!</h4>

<p>Luckily, Euler proved the wonderful formula:
<script type="math/tex">\displaystyle p(n) = \sum_{k \neq 0} (-1)^{k-1} p(n - k(3k-1)/2)</script>
where <script type="math/tex">p(0) = 1</script> and if <script type="math/tex">% &lt;![CDATA[
k < 0 %]]&gt;</script> then <script type="math/tex">p(k) = 0</script>. So at least with this formula, the time it takes to computer <script type="math/tex">p(n)</script> is linear in <script type="math/tex">n</script>.</p>

<p>Unfortunately, this approach only works for partitioning, and we don’t have a similar formula for general coin-finding problems (at least, I don’t think so…).</p>

<p>So, the next step is to write a dynamic algorithm in python that implements this. (Don’t try to run the following code. Trust me. I’ll explain in a bit.)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="c">#list of numbers of partitions, starting with p(0) = 1</span>
</span><span class="line"><span class="n">part</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c">#Uses Euler&#39;s recursion to find p(n)</span>
</span><span class="line"><span class="k">while</span> <span class="p">(</span><span class="n">part</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">part</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">%</span> <span class="mi">1000000</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">):</span>
</span><span class="line">    <span class="n">val</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">part</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">        <span class="n">val</span> <span class="o">=</span> <span class="n">val</span> <span class="o">+</span> <span class="p">((</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">*</span><span class="n">part</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="p">(</span><span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">)]</span>
</span><span class="line">        <span class="n">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">
</span><span class="line">    <span class="n">k</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">        <span class="n">val</span> <span class="o">=</span> <span class="n">val</span> <span class="o">+</span> <span class="p">((</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">*</span><span class="n">part</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="p">(</span><span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">)]</span>
</span><span class="line">        <span class="n">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">
</span><span class="line">    <span class="n">part</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">part</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">part</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">part</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you’re interested, you can insert a print statement into the loop and watch <script type="math/tex">p(n)</script> get big. By the time you hit <script type="math/tex">n = 6000</script> I think you’ll be looking at 100 digit numbers. You’ll also wonder why you haven’t seen 6 zeroes at the end of any of these numbers yet, and eventually python will try to convert infinity to an integer and throw an error. </p>

<p>There’s one last thing to do, and I’ll admit it took me an embarassingly long time to think of it. <em>We only need to keep track of the last 7 digits of <script type="math/tex">p(n)</script>.</em> Because of the way modular arithmetic works, and because Euler’s formula only involves adding and multiplying, instead of keeping <script type="math/tex">p(n)</script> in the list “part”, just store <script type="math/tex">p(n)</script> % <script type="math/tex">10^6</script>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="c">#list of numbers of partitions, starting with p(0) = 1</span>
</span><span class="line"><span class="n">part</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c">#Uses Euler&#39;s recursion to find p(n)</span>
</span><span class="line"><span class="k">while</span> <span class="p">(</span><span class="n">part</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">part</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">%</span> <span class="mi">1000000</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">):</span>
</span><span class="line">    <span class="n">val</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">part</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">        <span class="n">val</span> <span class="o">=</span> <span class="n">val</span> <span class="o">+</span> <span class="p">((</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">*</span><span class="n">part</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="p">(</span><span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">)]</span>
</span><span class="line">        <span class="n">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">
</span><span class="line">    <span class="n">k</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">        <span class="n">val</span> <span class="o">=</span> <span class="n">val</span> <span class="o">+</span> <span class="p">((</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">*</span><span class="n">part</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="p">(</span><span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">)]</span>
</span><span class="line">        <span class="n">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">
</span><span class="line">    <span class="c">#only need to keep the last 7 digits, since we&#39;re only adding</span>
</span><span class="line">    <span class="c">#remember, if a % m = 0 and b % m = 0 then a + b % m = 0 !!!!</span>
</span><span class="line">    <span class="n">part</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">val</span> <span class="o">%</span> <span class="mi">1000000</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">part</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">part</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">part</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Left Academic Mathematics]]></title>
    <link href="http://brianmannmath.github.io/blog/2014/02/13/why-i-left-academic-mathematics/"/>
    <updated>2014-02-13T16:16:53-07:00</updated>
    <id>http://brianmannmath.github.io/blog/2014/02/13/why-i-left-academic-mathematics</id>
    <content type="html"><![CDATA[<p>I want to write something about why I decided to leave academic mathematics. I feel I owe it to colleagues and friends I’ve worked with, and I want to force myself to think clearly about my reasons. Aside from a few close friends, I haven’t talked to many people about this yet.</p>

<h3 id="things-that-arent-reasons-im-leaving">Things that <em>aren’t</em> reasons I’m leaving</h3>

<p>Right away, I’d like to clear up some misconceptions people might have about my decision.</p>

<h4 id="im-not-leaving-because-i-felt-i-wasnt-good-enough">I’m not leaving because I felt I wasn’t good enough</h4>
<p>or that I wasn’t smart enough to make it. It’s usual, in a field like mathematics, to feel dumb or to feel like you’re failing or not getting anywhere. I’ve had my fair share of this. But I made progress often enough, and enough people had confidence in me that I never really doubted my own ability to suceed. I wasn’t the smartest or the quickest mathematician (not even close) but I am smart <em>enough</em>. </p>

<p>When I talked to my advisor about my decision to leave, he told me that he thought I had the potential to become a good academic mathematician (which, if you know my advisor, is one of the biggest compliments I’ve ever recieved). So there was never really any doubt about my ability to have a successful academic career.</p>

<h4 id="im-not-leaving-because-of-the-people-or-the-culture">I’m not leaving because of the people or the culture.</h4>
<p>Although I’m certain that leaving mathematics is the right thing for me, it’s also not an easy decision. I’m choosing to leave a community of exceptionally intelligent, enthusiastic, quirky, fun, and kind people. It’s hard for me not to think of it as a betrayal; these people encouraged me, answered my dumb questions, went out for beers with me, let me stay with their friends and put up with me for a month (Ric, Catherine), and invited me to give talks. </p>

<p>The community of Geometric Group Theorists (particularly you Out(<script type="math/tex">F_N</script>) and mapping class people) is a wonderful one, and I will miss attending conferences and events terribly (oh man, I’m kind of tearing up writing this part).  </p>

<p>And if there’s any doubt about this, I still love mathematics. </p>

<h3 id="the-reasons">The reasons</h3>

<p>Let’s start with the easy one:</p>

<h4 id="i-dont-really-enjoy-teaching-at-a-university">I don’t really enjoy teaching at a university.</h4>

<p>I love explaining things I’m excited about to people. Ask any of my friends or mathematical acquaintances: if I get excited about something, I <em>will</em> try to explain it to you, and you <em>will</em> probably get annoyed with me if you spend enough time around me. </p>

<p>I hate dealing with all the bureaucratic crap that comes with teaching. I’m tired of all the students who don’t want to be there. I’m tired of students trying to get me to change their grade. </p>

<p>I loved talking to students one-on-one in office hours. It gave me a good chance to get an idea of where they stood mathematically and tailor my explainations to them. Unfortunately, most of the students who showed up to office hours for help were the good students. The bad students that showed up were almost always there to ask me to change a grade. </p>

<p>I really did care about teaching the material and trying to pass my excitement about mathematics along to the class. But I’m also of the philosophy that if a student wasn’t willing to try, I wasn’t going to put in any extra effort to babysit their education (which probably explains why my mediocre-good students gave me excellent reviews and really liked me, while the bad ones consistently trashed my teaching in reviews). </p>

<h4 id="i-have-lots-of-hobbies">I have lots of hobbies</h4>

<p>My greatest flaw as a mathematician (just winning out against my distain for working out details) is that I had too many other hobbies. I firmly believe that a good academic mathematician (at least in their graduate school and post-doc years) needs to be obsessed with their research. You can have other hobbies, but given the choice, you’d ultimately pick mathematics over them if push came to shove. </p>

<p>I have nothing but respect for people that have the ability to do that. I don’t. I heard a lot of advice of the form “you should get really good at one thing” or “you should pick something you’re really passionate about and do that.” I’ve spent more time that I’d care to admit thinking about why I didn’t have that one thing I was really passionate about. I’ve often wondered what was wrong with me. I mean, I love mathematics, but I can’t see myself doing <em>only</em> that for the rest of my life. In fact, I couldn’t think of one thing I’d give up everything else for.</p>

<p>I love math. I love to ride my bike. I love to work on bikes. I love to play video games. I love to problem solve. I love to code. I love to learn about computer science. I love to read. I love to build things. I love to think about philosophy. I tried for a long time to pick one (math) and force myself to love it above everything else, and I think it made me really unhappy for a long time. </p>

<p>My ephiphany? There is actually something I’m passionate about, and it’s something I missed my entire adult life until extremely recently. I’m passionate about learning new things. About solving problems. About not getting bored doing the same thing over and over. </p>

<p>I need time (and money) to have hobbies. </p>

<p>I need to be able to obsess about things that aren’t my job.</p>

<h4 id="i-dont-like-to-move">I don’t like to move</h4>

<p>As anyone who’s ever been at a conference with me can tell you, I don’t like being away from the things that help me de-stress.</p>

<p>Let’s list some of those things: a bike, a coffee shop I like, video games, the places I normally eat, good internet.</p>

<p>I enjoy some degree of consistency in my life, and I don’t feel an academic life can provide this. The idea of moving for a post-doc and eventually a tenure track job every 3 years for the next 6-9 years sounds terrible to me. This is compounded by the fact that I wouldn’t get to pick where I’d be moving. </p>

<p>I want to chose where I live. </p>

<p>I want the ability to have a stable relationship. </p>

<p>“But wait!” you say. “I know lots of mathematicians, even grad students who have partners and even kids.” That’s true. But those families move around with that mathematician. My girlfriend happens to have a good software job in my favorite part of the country (which has great weather, lots of jobs, and great mountain biking). And even if I were single, the notion of being able to have a serious relationship without asking the other person to move every three years (or doing long-distance) would be attractive. </p>

<h4 id="lets-talk-about-money">Let’s talk about money</h4>

<p>I’m not leaving to get rich, but I believe that the hard work and talent of most mathematicians goes unrewarded. These are people who work absurd hours, deal with piles of bullshit from university administrators and students, and still manage to produce original research and educate undergrads. Unless you’re one of a handful of super-star mathematicians, you will get paid as much as or less (at a tenure/tenure-track position) than many first-year software developers fresh out of college.</p>

<p>I appreciate that people are so passionate about mathematics that they’re willing to put up with that. I’m not. </p>

<p>I would be happy with enough money to have a nice apartment/house, have a nice bikes, buy loved-ones nice things for birthdays/holidays, and travel some.</p>

<h4 id="please-dont-take-this-the-wrong-way">Please don’t take this the wrong way</h4>

<p>Any mathematicians reading this, I don’t mean to offend. I really am in awe of people who love math so much that they’re willing to put up with all the things I described. I don’t understand it, but I think it’s amazing.</p>

<p>I will miss it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Representation Stability Part 1]]></title>
    <link href="http://brianmannmath.github.io/blog/2014/01/23/representation-stability/"/>
    <updated>2014-01-23T18:40:25-07:00</updated>
    <id>http://brianmannmath.github.io/blog/2014/01/23/representation-stability</id>
    <content type="html"><![CDATA[<p>At the Joint Math Meetings in January 2014, I saw <a href="http://www.math.uchicago.edu/~farb/">Benson Farb</a> give a talk about some very beautiful, very cutting-edge mathematics called <em>representation stability.</em> It’s still very new (the <a href="http://arxiv.org/pdf/1008.1368.pdf">first paper</a> is from 2013), but it’s a very powerful tool that should prove useful in both purely mathematical and applied settings (namely physics). </p>

<p>Before I talk about respresentation stability, I should talk about the notion of <em>stability.</em> The word stability is used in many different settings, but I will define precisely what I mean here. </p>

<h3 id="stability">Stability</h3>

<p>Let $X$ be a sequence of spaces </p>

<script type="math/tex; mode=display">X_0 \rightarrow X_1 \rightarrow X_2 \rightarrow \cdots</script>

<p>For our purposes, they will normally be groups or manifolds and the maps will be group homomorphisms (usually injective) or continuous maps. Any category will do though. Let’s call the category where $X$ lives $\mathcal{C}$.</p>

<p>Let $F$ be a functor from $\mathcal{C}$ to another category $\mathcal{D}$. We say that $X$ is <em>stable</em> with respect to $F$ if, for some $n &gt; 0$, we have $F(X_i) \cong F(X_{i+1})$ for all $i &gt; n$. In other words, the maps in the sequence $F(X) = $</p>

<script type="math/tex; mode=display">F(X_0) \rightarrow F(X_1) \rightarrow F(X_2) \rightarrow \cdots</script>

<p>are eventually isomorphisms. This is a very general concept, and there isn’t much one can say about general stability (there are just too many categories and functors!). However, there are some very special functors that mathematicians care about. </p>

<h3 id="homology">Homology</h3>

<p>Homology, in general, is an advanced topic more suited to a graduate course in algebraic topology. The wonderful thing about homology, though, is that while the technical details are opaque to those without the required background, one can give a fairly complete intuitive definition without too much pain and suffering. I’m writing this section for the reader who knows little-to-nothing about homology - if you’ve taken an algebraic topology course, feel free to skip it. </p>

<h4 id="okay-so-what-it-is">Okay, so what it is?</h4>

<p>(Very) roughly speaking, homology is a measurement of a toplogical space’s inability to be collapsed to a point. Before I get into any details, let’s look at some examples:</p>

<p>Consider $S^1$, the circle. I encourage the reader not to think about the circle as “living in” the the plane or any larger space, but to think about it as an object on its own. $S^1$ cannot be collapsed to a point - intuitively speaking, one cannot  deform $S^1$ to a point without cutting it somewhere (remember, $S^1$, is not living in the plane. It <em>is</em> true that one can collpase the circle in $\mathbb{R}^2$ to a point in $\mathbb{R}^2$). </p>

<p>(Actually, for the industrious reader, if one thinks of $S^1$ at the unit interval $[0,1]$ with $0$ and $1$ identified, the result that $S^1$ is not homotopy equivalent to a point can be made precise using only freshman calculus!) </p>

<p>Similarly, the 2-sphere $S^2$ cannot be deformed to a point. But if we look more closely, we see that the “holes” in these two spaces are different. Indeed, any 1-dimensional loop on $S^2$ <em>can</em> be deformed to a point, but nevertheless, there is still a “hole” in $S^2$ which prevents us from continuously deforming it to a point.</p>

<p>We need a way to measure these differences quantitatively; after all, this is mathematics! That’s what homology does. </p>

<p>The homology of a space $X$ is a collection of $\mathbb{Q}$-vector spaces $H_i(X,\mathbb{Q})$ for <script type="math/tex">i = 0,1,2, \ldots</script>. The $\mathbb{Q}$ isn’t really important here; indeed, it’s possible to replace $\mathbb{Q}$ with any other field or ring (in which case, you get a module instead of a vector space). But I assume most of my readers are comfortable with vector spaces at least, so we’ll work over $\mathbb{Q}$. </p>

<p>Furthermore, if <script type="math/tex">f: X \rightarrow Y</script> is a continuous map, then it induces a linear map <script type="math/tex">f_*: H_i(X,\mathbb{Q}) \rightarrow H_i(Y,\mathbb{Q})</script> for all $i$. In other words, each $H_i(–,\mathbb{Q})$ is a functor from the category of topological spaces to the category of vector spaces over $\mathbb{Q}$! The nice thing about this is that homology is an invariant: that is, if $X \cong Y$, then <script type="math/tex">H_i(X,\mathbb{Q}) \cong H_i(Y,\mathbb{Q})</script>. So, if we want to tell if two spaces are different, we can (in theory) compute their homology and see if they are different dimensions! </p>

<p>Let’s return to our examples to see what homology does. I haven’t told you how one actually defines the vector spaces $H_i(X,\mathbb{Q})$ yet, so we can’t do any computations, but I can tell you the answers.</p>

<p>For a point,</p>

<script type="math/tex; mode=display">H_i(pt,\mathbb{Q}) = 0</script>

<p>for all $i$. For <script type="math/tex">S^1</script>,</p>

<script type="math/tex; mode=display">H_1(S^1, \mathbb{Q}) = \mathbb{Q}</script>

<p>which tell us that <script type="math/tex">S^1</script> cannot be deformed to a point. What about $S^2$? One can compute </p>

<script type="math/tex; mode=display">H_1(S^2,\mathbb{Q}) = 0</script>

<p>which tells us that $S^2$ cannot be deformed to $S^1$. Furthermore </p>

<script type="math/tex; mode=display">H_2(S^2,\mathbb{Q}) = \mathbb{Q}</script>

<p>so $S^2$ cannot be deformed to a point.  </p>

<h3 id="what-about-stability">What about stability?</h3>

<p>Remember, stability is a property of a sequence of spaces with respect to a functor, and now we have a handful of functors to play with! Let’s go back to the original setting: a sequence $X =$</p>

<script type="math/tex; mode=display">X_0 \rightarrow X_1 \rightarrow X_2 \rightarrow \cdots</script>

<p>of spaces. We say that $X$ is <em>homologically stable</em> if for every $i &gt; 0$, $X$ is stable with respect to $H_i(-,\mathbb{Q})$. Note that the point at which the seqeunce</p>

<script type="math/tex; mode=display">H_i(X_0,\mathbb{Q}) \rightarrow H_i(X_1, \mathbb{Q}) \rightarrow H_i(X_2, \mathbb{Q}) \rightarrow \cdots</script>

<p>stabilizes might depend on $i$.</p>

<h3 id="thats-enough-for-one-sitting-next-time">That’s enough for one sitting. Next time?</h3>

<p>In part 2, I want to discuss a motivating example where homological stability fails but “should” hold, and explain what respresentation stability is, and how it solves our problem.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Lapply to Import Files to R]]></title>
    <link href="http://brianmannmath.github.io/blog/2014/01/20/using-lapply-to-import-files-to-r/"/>
    <updated>2014-01-20T18:22:42-07:00</updated>
    <id>http://brianmannmath.github.io/blog/2014/01/20/using-lapply-to-import-files-to-r</id>
    <content type="html"><![CDATA[<p>One of the trickest parts, for me, of learning a new language is figuring out how it interacts with the outside world (i.e. the rest of your computer). This post might seem dumb to people with even a few months of R experience, but I decided to post it anyway, if only to document my learning process. When I started learning R I was given the following task: you have a directory which stores several .csv files, say 001.csv, 002.csv, … 332.csv and a task which requires you to do something with all of them. The task itself is irrelevant, so we’ll ignore it. How do you import all these files efficiently? </p>

<p>My first instinct (probably because the file names were all numbers) was to loop over all of the names. But, of course, I needed to ensure all of the zeroes were still there. So I needed to do something like</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="kr">for</span> <span class="p">(</span>id <span class="kr">in</span> <span class="m">1</span><span class="o">:</span><span class="m">332</span><span class="p">){</span>
</span><span class="line">    num <span class="o">=</span> formatC<span class="p">(</span>id<span class="p">,</span> width <span class="o">=</span> <span class="m">3</span><span class="p">,</span> flag <span class="o">=</span> <span class="s">&quot;0&quot;</span><span class="p">)</span> <span class="c1">#creates a 3-digit string representing an integer</span>
</span><span class="line">    D <span class="o">&lt;-</span> paste<span class="p">(</span>directory<span class="p">,</span> paste<span class="p">(</span>num<span class="p">,</span> <span class="s">&quot;csv&quot;</span><span class="p">,</span> sep <span class="o">=</span> <span class="s">&quot;.&quot;</span><span class="p">),</span> sep <span class="o">=</span> <span class="s">&quot;/&quot;</span><span class="p">)</span> <span class="c1">#D is the file name string</span>
</span><span class="line">    x <span class="o">&lt;-</span> read.csv<span class="p">(</span>D<span class="p">)</span>
</span><span class="line">    data <span class="o">&lt;-</span> c<span class="p">(</span>data<span class="p">,</span>x<span class="p">)</span> <span class="c1">#data is a list of all the data frames we needed to import</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But that’s gross, and in any case, it doesn’t work if the names of the files don’t live in some list you can easily access (like 1:332). Recall, though, that R has some nice “map” functions, namely ‘lapply’. Also</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">dir<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>returns a list of the names of files in the working directory. So</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">setwd<span class="p">(</span><span class="s">&quot;where your .csv files are&quot;</span><span class="p">)</span>
</span><span class="line">data <span class="o">&lt;-</span> lapply<span class="p">(</span>dir<span class="p">(),</span>read.csv<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>returns a data frame consisting of all the .csv files you needed to import. Voila. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Who Am I?]]></title>
    <link href="http://brianmannmath.github.io/blog/2014/01/18/first-post/"/>
    <updated>2014-01-18T14:41:34-07:00</updated>
    <id>http://brianmannmath.github.io/blog/2014/01/18/first-post</id>
    <content type="html"><![CDATA[<p>My name is Brian Mann, and I’m a mathematician turned programmer/computer scientist.</p>

<p>Currently, I’m a doctoral student that the University of Utah doing research in the field of <a href="http://en.wikipedia.org/wiki/Geometric_group_theory">geometric group theory</a> under the advisement of <a href="http://en.wikipedia.org/wiki/Mladen_Bestvina">Mladen Bestvina</a>. Specifically, I study the outer automorphism group of finite rank free groups, and also the dynamics of group actions on $\mathbb{R} \mbox{-trees}$. I’ve written/co-authored two papers: <a href="http://arxiv.org/abs/1212.2986">Hyperbolicity of the Cyclic Splitting Complex</a> and <a href="http://arxiv.org/abs/1311.1771">Constructing Non-uniquely Ergodic Arational Trees</a>. (<em>A word of warning: these papers are not for beginners. They require basic knowledge about standard tools in geometric group theory, especially <a href="http://en.wikipedia.org/wiki/Bass-Serre">Bass-Serre Theory</a>. I will likely talk more about the background required in later posts.</em>)</p>

<p>For an overview of what I’ve been thinking about recently, you might want to look at slides from a recent <a href="https://github.com/brianmannmath/JointMathMeetings/blob/master/JMM_talk.pdf">talk</a> I gave at the Joint Math Meetings.</p>

<p>I love mathematics. But for various reasons (which I will likely write about in the future) I have decided not to pursue a career in academics. I also love computers. I’ve always been fascinated by them and enjoyed all of the little coding projects I’ve needed to do in my career as a mathematician, but have never had time to <em>really</em> learn to code. Now that I’m graduating, I’ve decided to change that. I’m teaching myself Python, R, Haskell, and C++ and trying to get a job in the Seattle area which uses my mathmematical knowledge/skills to computer-related applications (data science, crytpography, software development, etc…).</p>

<p>This blog is mainly to document my transformation from pure mathematician to a hybrid mathematician/computer-scientist/programmer. Although I am currently focusing on learning Python and R (which I feel will be most useful in my job hunt), I’m hoping to post a lot about Haskell. Which brings me to my next point…</p>

<h4 id="i-fucking-love-haskell">I fucking love Haskell.</h4>

<p>Look at this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="nf">fibs</span> <span class="ow">=</span> <span class="mi">1</span><span class="kt">:</span><span class="mi">1</span><span class="kt">:</span><span class="n">zipWith</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="n">fibs</span> <span class="p">(</span><span class="n">tail</span> <span class="n">fibs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I won’t lie and say this line of code made me fall in love with Haskell, because that’s not true. But it’s certainly one of the most beautiful lines of code I’ve ever seen. I fell in love with Haskell when a good friend (a hacker-turned-algebraic geometer-turned-computer security expert) told me about it. A language based on category theory, you say? Yes please. </p>

<p>Let me explain. I know <em>a lot</em> of category theory. I spent much of my undergrad at the University of Michigan taking graduate level math classes in algebraic geometry. And algebraic geometers <em>love</em> category theory. Why? Because it’s an <em>incredibly expressive language</em> which allows mathematicians to phrase difficult questions in simple, elegant terms. Sound familiar?</p>

<p>When I learned about Haskell, I didn’t know much about programming. But I knew enough to guess at the expressive power of a language based on categorical ideas. At the time, I poked around <a href="http://learnyouahaskell.com/">Learn you a Haskell</a> a bit, but never made any real progress; as an undergraduate taking graduate level mathematics and who was <em>sure</em> he wanted to go into academics, the only real motivation I had to learn Haskell was curiousity. Now I have quite a bit more. </p>

<p>I love Haskell for the same reason I love mathematics. It’s beautiful. Expressive. Powerful. Working in Haskell teaches me to think in different ways about programming. And perhaps one of the reasons I like it so much is because it’s so <em>familiar</em>. It feels like mathematics, because it is mathematics.</p>

<p>Anecdote: I was curious about what a monad was, so naturally I went to <a href="http://en.wikipedia.org/wiki/Monad_(functional_programming)">the wikipedia page</a>. Admittedly, I was confused. Programmers think about things a little differently than mathematicians. So I went to <a href="http://en.wikipedia.org/wiki/Monad_(category_theory)">this wikipedia page</a> and learned what a monad was in category theory. And everything made sense. </p>

<h4 id="so-whats-this-blog-for-anyways">So what’s this blog for anyways?</h4>

<p>My goal here is simple. I want to tell people about cool things I’ve learned and am learning. I want people to know that high-level mathematics isn’t scary. It’s beautiful and fun, just like Haskell. I want people to be curious and ask questions about what I post. I want to force myself to explain things in simple terms so I understand them better myself.</p>

]]></content>
  </entry>
  
</feed>
